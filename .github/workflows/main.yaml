# This is a basic workflow to help you get started with Actions
name: CI-CD

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: taskbot
  CONTAINER_NAME: taskbot

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      # install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
  push_to_Docker_Hub:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # build docker image and push to docker hub
    # only if the app build successfully
    needs: [build]

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{env.IMAGE_NAME}}:latest

      - name: Run the image in a container
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{env.IMAGE_NAME}}:latest
          run: |
            echo "runing the docker image"
            echo "Testing the nodejs app endpoints"
            echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    runs-on: ubuntu-latest
    needs: [push_to_docker_hub]

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          # VPS IP
          host: ${{ secrets.VPS_SSH_HOST }}
          # VPS username
          username: ${{ secrets.VPS_SSH_USERNAME }}
          #password
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          # SSH key (copy it from your local machine)
          # key: ${{ secrets.VPS_SSH_SECRET }}
          # SSH port
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            echo "Delete old images and containers"
            echo "Pull new image"
            docker image pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            echo "Restart the container"
            docker stop ${{ env.CONTAINER_NAME }}
            docker container prune
            docker run --mount type=bind,source=${{ secrets.VPS_MOUNT_PATH }},target=/app/data --name ${{ env.CONTAINER_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
            docker image rm $(docker image ls -qf dangling=true)
